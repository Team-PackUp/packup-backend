package packup.tour.presentation;import lombok.RequiredArgsConstructor;import org.springframework.data.domain.Page;import org.springframework.web.bind.annotation.*;import packup.auth.annotation.Auth;import packup.common.dto.PageResponse;import packup.common.dto.ResultModel;import packup.tour.dto.TourInfoCreateRequest;import packup.tour.dto.TourInfoResponse;import packup.tour.dto.TourInfoUpdateRequest;import packup.tour.service.GuideTourService;@RestController@RequiredArgsConstructor@RequestMapping("/api/tour/guide")public class GuideTourApiController {    private final GuideTourService guideTourService;    /**     * 가이드 유저가 작성한 투어 목록을 페이징 방식으로 조회합니다.     *     * @param page 조회할 페이지 번호 (1부터 시작)     * @param size 페이지당 조회할 투어 개수     * @return 투어 정보 응답 객체가 포함된 표준 결과 모델     */    @GetMapping    public ResultModel<PageResponse<TourInfoResponse>> getTours(            @Auth Long memberId,            @RequestParam(defaultValue = "1") int page,            @RequestParam(defaultValue = "10") int size) {        PageResponse<TourInfoResponse> tours = guideTourService.getTours(memberId, page, size);        return ResultModel.success(tours);    }    /**     * 가이드유저의 투어 신규 등록     */    @PostMapping    public ResultModel<TourInfoResponse> createTour(            @Auth Long memberId,            @RequestBody TourInfoCreateRequest request) {        TourInfoResponse newTour = guideTourService.createTour(memberId, request);        return ResultModel.success(newTour);    }    /**     * 가이드유저의 투어 정보 수정     */    @PutMapping("/{seq}")    public ResultModel<TourInfoResponse> updateTour(            @PathVariable Long seq,            @Auth Long memberId,            @RequestBody TourInfoUpdateRequest request) {        request.setSeq(seq); // pathVariable을 DTO에 반영        TourInfoResponse updatedTour = guideTourService.updateTour(memberId, request);        return ResultModel.success(updatedTour);    }}